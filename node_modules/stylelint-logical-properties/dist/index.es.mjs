import stylelint from 'stylelint';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';

var ruleName = 'stylelint-logical-properties/enforce-logical-properties';

var messages = stylelint.utils.ruleMessages(ruleName, {
  unexpectedProp: function unexpectedProp(physicalProperty, logicalProperty) {
    return "Unexpected \"".concat(physicalProperty, "\" property. Use \"").concat(logicalProperty, "\".");
  },
  unexpectedValue: function unexpectedValue(property, physicalValue, logicalValue) {
    return "Unexpected \"".concat(physicalValue, "\" value in \"").concat(property, "\" property. Use \"").concat(logicalValue, "\".");
  },
  unsupportedProp: function unsupportedProp(physicalProperty, logicalProperty) {
    return "\"".concat(physicalProperty, "\" is not part of CSS specs. Use \"").concat(logicalProperty[0], "\" and \"").concat(logicalProperty[1], "\".");
  }
});

var validateRuleWithProps = function validateRuleWithProps(root, props, fn) {
  // conditionally walk nodes with children
  if (root.nodes && root.nodes.length) {
    var args = [];
    var hasProps = props.every(function (prop) {
      var declIndex = root.nodes.findIndex(function (child) {
        return child.type === 'decl' && child.prop === prop;
      });
      var decl = root.nodes[declIndex];

      if (decl) {
        args.push(decl, declIndex);
      }

      return decl;
    });

    if (hasProps) {
      fn.apply(void 0, args);
    }
  }
};

var dirSelectorRegExp = /:dir\(ltr|rtl\)/i;

var isDirRule = function isDirRule(node) {
  return node.type === 'rule' && dirSelectorRegExp.test(node.selector);
}; // walk all container nodes


var walk = function walk(node, fn) {
  if (node.nodes && node.nodes.length) {
    var nodes = node.nodes.slice();
    var length = nodes.length;
    var index = -1; // eslint-disable-next-line no-plusplus

    while (++index < length) {
      var child = nodes[index];

      if (!isDirRule(child)) {
        fn(child);
        walk(child, fn);
      }
    }
  }
};

var isMethodIndifferent = function isMethodIndifferent(method) {
  return method === 'ignore' || method === false || method === null;
};
var isMethodAlways = function isMethodAlways(method) {
  return method === 'always' || method === true;
};
var isContextAutofixing = function isContextAutofixing(context) {
  return Boolean(Object(context).fix);
};
var isNodeMatchingDecl = function isNodeMatchingDecl(decl, regexp) {
  return decl.type === 'decl' && regexp.test(decl.prop);
};
var isDeclAnException = function isDeclAnException(decl, propExceptions) {
  return propExceptions.some(function (match) {
    return match instanceof RegExp ? match.test(decl.prop) : String(match || '').toLowerCase() === String(decl.prop || '').toLowerCase();
  });
};
var isDeclReported = function isDeclReported(decl, reportedDecls) {
  return reportedDecls.has(decl);
};
var createReporters = function createReporters(result) {
  return {
    reportUnexpectedProperty: function reportUnexpectedProperty(decl, logicalProperty) {
      return stylelint.utils.report({
        message: messages.unexpectedProp(decl.prop, logicalProperty),
        node: decl,
        result: result,
        ruleName: ruleName
      });
    },
    reportUnsupportedProp: function reportUnsupportedProp(decl, logicalProperty) {
      return stylelint.utils.report({
        message: messages.unsupportedProp(decl.prop, logicalProperty),
        node: decl,
        result: result,
        ruleName: ruleName
      });
    },
    reportUnexpectedValue: function reportUnexpectedValue(node, value) {
      return stylelint.utils.report({
        message: messages.unexpectedValue(node.prop, node.value, value),
        node: node,
        result: result,
        ruleName: ruleName
      });
    }
  };
};

var inline = {
  start: {
    ltr: 'left',
    rtl: 'right'
  },
  end: {
    ltr: 'right',
    rtl: 'left'
  }
};
var physical4Prop = [[['top', 'left', 'bottom', 'right'], 'inset'], [['margin-top', 'margin-right', 'margin-bottom', 'margin-left'], ['margin-block', 'margin-inline']], [['padding-top', 'padding-right', 'padding-bottom', 'padding-left'], ['padding-block', 'padding-inline']]];
var physical2Prop = [[['top', 'bottom'], 'inset-block'], [['left', 'right'], 'inset-inline'], [['margin-top', 'margin-bottom'], 'margin-block'], [['margin-left', 'margin-right'], 'margin-inline'], [['padding-top', 'padding-bottom'], 'padding-block'], [['padding-left', 'padding-right'], 'padding-inline']];
var physicalProp = function physicalProp(dir) {
  return [[['margin-top'], 'margin-block-start'], [['margin-bottom'], 'margin-block-end'], [["margin-".concat(inline.start[dir])], 'margin-inline-start'], [["margin-".concat(inline.end[dir])], 'margin-inline-end'], [['margin'], ['margin-block', 'margin-inline']], [['padding-top'], 'padding-block-start'], [['padding-bottom'], 'padding-block-end'], [["padding-".concat(inline.start[dir])], 'padding-inline-start'], [["padding-".concat(inline.end[dir])], 'padding-inline-end'], [['padding'], ['padding-block', 'padding-inline']], [['top'], 'inset-block-start'], [['bottom'], 'inset-block-end'], [[inline.start[dir]], 'inset-inline-start'], [[inline.end[dir]], 'inset-inline-end'], // border
  [['border-top'], 'border-block-start'], [['border-bottom'], 'border-block-end'], [["border-".concat(inline.start[dir])], 'border-inline-start'], [["border-".concat(inline.end[dir])], 'border-inline-end'], [['border-top-color'], 'border-block-start-color'], [['border-top-style'], 'border-block-start-style'], [['border-top-width'], 'border-block-start-width'], [['border-bottom-color'], 'border-block-end-color'], [['border-bottom-style'], 'border-block-end-style'], [['border-bottom-width'], 'border-block-end-width'], [["border-".concat(inline.start[dir], "-color")], 'border-inline-start-color'], [["border-".concat(inline.start[dir], "-style")], 'border-inline-start-style'], [["border-".concat(inline.start[dir], "-width")], 'border-inline-start-width'], [["border-".concat(inline.end[dir], "-color")], 'border-inline-end-color'], [["border-".concat(inline.end[dir], "-style")], 'border-inline-end-style'], [["border-".concat(inline.end[dir], "-width")], 'border-inline-end-width'], [["border-top-".concat(inline.start[dir], "-radius")], 'border-start-start-radius'], [["border-bottom-".concat(inline.start[dir], "-radius")], 'border-end-start-radius'], [["border-top-".concat(inline.end[dir], "-radius")], 'border-start-end-radius'], [["border-bottom-".concat(inline.end[dir], "-radius")], 'border-end-end-radius'], [['height'], 'block-size'], [['min-height'], 'min-block-size'], [['max-height'], 'max-block-size'], [['width'], 'inline-size'], [['min-width'], 'min-inline-size'], [['max-width'], 'max-inline-size']];
};
var physicalValue = function physicalValue(dir) {
  var _ref, _ref2, _ref3;

  return [[/^clear$/i, (_ref = {}, _defineProperty(_ref, inline.start[dir], 'inline-start'), _defineProperty(_ref, inline.end[dir], 'inline-end'), _ref)], [/^float$/i, (_ref2 = {}, _defineProperty(_ref2, inline.start[dir], 'inline-start'), _defineProperty(_ref2, inline.end[dir], 'inline-end'), _ref2)], [/^text-align$/i, (_ref3 = {}, _defineProperty(_ref3, inline.start[dir], 'start'), _defineProperty(_ref3, inline.end[dir], 'end'), _ref3)]];
};
var migrationNoneSpec = [[['margin-start'], ['margin-block-start', 'margin-inline-start']], [['margin-end'], ['margin-block-end', 'margin-inline-end']], [['padding-start'], ['padding-block-start', 'padding-inline-start']], [['padding-end'], ['padding-block-end', 'padding-inline-end']], [['inset-start'], ['inset-inline-start', 'inset-block-start']], [['inset-end'], ['inset-inline-end', 'inset-block-end']]];

var handleNonStandardProperties = function handleNonStandardProperties(_ref) {
  var node = _ref.node,
      isAutofix = _ref.isAutofix,
      reportedDecls = _ref.reportedDecls,
      reportUnsupportedProp = _ref.reportUnsupportedProp;
  return migrationNoneSpec.forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        prop = _ref3[0],
        props = _ref3[1];

    validateRuleWithProps(node, prop, function (outDateDecl) {
      console.warn("Property ".concat(prop[0], " is not part of Logical standards."));

      if (isAutofix) {
        console.warn("Migrating ".concat(prop[0], " to Logical standards."));
        var value = outDateDecl.value;
        var values = value.split(' ');
        outDateDecl.cloneBefore({
          prop: props[0],
          value: values[0]
        });
        outDateDecl.cloneAfter({
          prop: props[1],
          value: values[1] || values[0]
        });
        outDateDecl.remove();
      } else if (!isDeclReported(outDateDecl, reportedDecls)) {
        reportUnsupportedProp(outDateDecl, props);
        reportedDecls.set(outDateDecl);
      }
    });
  });
};

var handle4Properties = function handle4Properties(_ref) {
  var node = _ref.node,
      isAutofix = _ref.isAutofix,
      reportedDecls = _ref.reportedDecls,
      propExceptions = _ref.propExceptions,
      reportUnexpectedProperty = _ref.reportUnexpectedProperty;
  return physical4Prop.forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        props = _ref3[0],
        prop = _ref3[1];

    validateRuleWithProps(node, props, function (blockStartDecl, blockStartIndex, inlineStartDecl, inlineStartIndex, blockEndDecl, blockEndIndex, inlineEndDecl) {
      var firstInlineDecl = blockStartDecl;

      if (!isDeclAnException(blockStartDecl, propExceptions) && !isDeclAnException(inlineStartDecl, propExceptions) && !isDeclAnException(blockEndDecl, propExceptions) && !isDeclAnException(inlineEndDecl, propExceptions)) {
        if (isAutofix) {
          var values = [blockStartDecl.value, inlineStartDecl.value, blockEndDecl.value, inlineEndDecl.value];

          if (Array.isArray(prop)) {
            var blockStart = values[0],
                inlineEnd = values[1],
                blockEnd = values[2],
                inlineStart = values[3];
            firstInlineDecl.cloneBefore({
              prop: prop[0],
              value: [blockStart, blockEnd].join(' ')
            });
            firstInlineDecl.cloneBefore({
              prop: prop[1],
              value: [inlineStart, inlineEnd].join(' ')
            });
          } else {
            firstInlineDecl.cloneBefore({
              prop: prop,
              value: values.join(' ')
            });
          }

          blockStartDecl.remove();
          inlineStartDecl.remove();
          blockEndDecl.remove();
          inlineEndDecl.remove();
        } else if (!isDeclReported(blockStartDecl, reportedDecls) && !isDeclReported(inlineStartDecl, reportedDecls) && !isDeclReported(blockEndDecl, reportedDecls) && !isDeclReported(inlineEndDecl, reportedDecls)) {
          reportUnexpectedProperty(firstInlineDecl, prop);
          reportedDecls.set(blockStartDecl);
          reportedDecls.set(inlineStartDecl);
          reportedDecls.set(blockEndDecl);
          reportedDecls.set(inlineEndDecl);
        }
      }
    });
  });
};

var handle2Properties = function handle2Properties(_ref) {
  var node = _ref.node,
      isAutofix = _ref.isAutofix,
      reportedDecls = _ref.reportedDecls,
      propExceptions = _ref.propExceptions,
      reportUnexpectedProperty = _ref.reportUnexpectedProperty;
  return physical2Prop.forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        props = _ref3[0],
        prop = _ref3[1];

    validateRuleWithProps(node, props, function (startDecl, startIndex, endDecl, endStartIndex) {
      var firstInlineDecl = startIndex < endStartIndex ? startDecl : endDecl;

      if (!isDeclAnException(startDecl, propExceptions) && !isDeclAnException(endDecl, propExceptions)) {
        if (isAutofix) {
          firstInlineDecl.cloneBefore({
            prop: prop,
            value: startDecl.value === endDecl.value ? startDecl.value : [startDecl.value, endDecl.value].join(' ')
          });
          startDecl.remove();
          endDecl.remove();
        } else if (!isDeclReported(startDecl, reportedDecls) && !isDeclReported(endDecl, reportedDecls)) {
          reportUnexpectedProperty(firstInlineDecl, prop);
          reportedDecls.set(startDecl);
          reportedDecls.set(endDecl);
        }
      }
    });
  });
};

var handleProperty = function handleProperty(_ref) {
  var node = _ref.node,
      isAutofix = _ref.isAutofix,
      reportedDecls = _ref.reportedDecls,
      propExceptions = _ref.propExceptions,
      reportUnexpectedProperty = _ref.reportUnexpectedProperty,
      dir = _ref.dir;
  return physicalProp(dir).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        props = _ref3[0],
        prop = _ref3[1];

    validateRuleWithProps(node, props, function (physicalDecl) {
      if (!isDeclAnException(physicalDecl, propExceptions)) {
        if (isAutofix) {
          if (Array.isArray(prop)) {
            var value = physicalDecl.value;

            var _ref4 = function () {
              var values = value.split(' ');

              if (values.length === 1) {
                return [value, value];
              }

              if (values.length === 2) {
                var _values = _slicedToArray(values, 2),
                    block = _values[0],
                    inline = _values[1];

                return [block, inline];
              }

              if (values.length === 3) {
                var _values2 = _slicedToArray(values, 3),
                    blockStart = _values2[0],
                    _inline = _values2[1],
                    blockEnd = _values2[2];

                return [[blockStart, blockEnd].join(' '), _inline];
              }

              if (values.length === 4) {
                var _values3 = _slicedToArray(values, 4),
                    _blockStart = _values3[0],
                    inlineEnd = _values3[1],
                    _blockEnd = _values3[2],
                    inlineStart = _values3[3];

                return [[_blockStart, _blockEnd].join(' '), [inlineStart, inlineEnd].join(' ')];
              }

              return [];
            }(),
                _ref5 = _slicedToArray(_ref4, 2),
                blockValue = _ref5[0],
                inlineValue = _ref5[1];

            physicalDecl.cloneBefore({
              prop: prop[0],
              value: blockValue
            });
            physicalDecl.cloneBefore({
              prop: prop[1],
              value: inlineValue
            });
            physicalDecl.remove();
            return;
          } // eslint-disable-next-line no-param-reassign


          physicalDecl.prop = prop;
        } else if (!isDeclReported(physicalDecl, reportedDecls)) {
          reportUnexpectedProperty(physicalDecl, prop);
          reportedDecls.set(physicalDecl);
        }
      }
    });
  });
};

var handleValue = function handleValue(_ref) {
  var node = _ref.node,
      isAutofix = _ref.isAutofix,
      reportedDecls = _ref.reportedDecls,
      propExceptions = _ref.propExceptions,
      reportUnexpectedValue = _ref.reportUnexpectedValue,
      dir = _ref.dir;
  return physicalValue(dir).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        regexp = _ref3[0],
        props = _ref3[1];

    if (isNodeMatchingDecl(node, regexp) && !isDeclAnException(node, propExceptions)) {
      var valueKey = node.value.toLowerCase();

      if (valueKey in props) {
        var value = props[valueKey];

        if (isAutofix) {
          // eslint-disable-next-line no-param-reassign
          node.value = value;
        } else {
          reportUnexpectedValue(node, value);
          reportedDecls.set(node);
        }
      }
    }
  });
};

var reportedDecls = new WeakMap();
var plugin = function plugin(method, opts, context) {
  var propExceptions = [].concat(Object(opts).except || []);
  var isAutofix = isContextAutofixing(context);
  var dir = /^rtl$/i.test(Object(opts).direction) ? 'rtl' : 'ltr';
  return function (root, result) {
    // validate the method
    var isMethodValid = stylelint.utils.validateOptions(result, ruleName, {
      actual: method,
      possible: function possible() {
        return isMethodIndifferent(method) || isMethodAlways(method);
      }
    });

    var _createReporters = createReporters(result),
        reportUnexpectedProperty = _createReporters.reportUnexpectedProperty,
        reportUnsupportedProp = _createReporters.reportUnsupportedProp,
        reportUnexpectedValue = _createReporters.reportUnexpectedValue;

    if (isMethodValid && isMethodAlways(method)) {
      walk(root, function (node) {
        // MIGRATION from out of date props https://github.com/csstools/stylelint-use-logical/issues/1
        handleNonStandardProperties({
          node: node,
          isAutofix: isAutofix,
          reportedDecls: reportedDecls,
          reportUnsupportedProp: reportUnsupportedProp
        }); // validate or autofix 4 physical properties as logical shorthands

        handle4Properties({
          node: node,
          isAutofix: isAutofix,
          reportedDecls: reportedDecls,
          reportUnexpectedProperty: reportUnexpectedProperty,
          propExceptions: propExceptions
        }); // validate or autofix 2 physical properties as logical shorthands

        handle2Properties({
          node: node,
          isAutofix: isAutofix,
          reportedDecls: reportedDecls,
          reportUnexpectedProperty: reportUnexpectedProperty,
          propExceptions: propExceptions
        }); // validate or autofix physical properties as logical

        handleProperty({
          node: node,
          isAutofix: isAutofix,
          reportedDecls: reportedDecls,
          reportUnexpectedProperty: reportUnexpectedProperty,
          propExceptions: propExceptions,
          dir: dir
        }); // validate or autofix physical values as logical

        handleValue({
          node: node,
          isAutofix: isAutofix,
          reportedDecls: reportedDecls,
          reportUnexpectedValue: reportUnexpectedValue,
          propExceptions: propExceptions,
          dir: dir
        });
      });
    }
  };
};

var index = stylelint.createPlugin(ruleName, plugin);

export default index;
export { ruleName };
//# sourceMappingURL=index.es.mjs.map
